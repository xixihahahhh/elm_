<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="SettingsStorage">
    <option name="infoConfig">
      <InfoConfig>
        <option name="author" value="作者" />
        <option name="controllerPackage" value="controller" />
        <option name="implPackage" value="manager/impl" />
        <option name="servicePackage" value="manager" />
      </InfoConfig>
    </option>
    <option name="templateConfigList">
      <map>
        <entry key="INTRICACY">
          <value>
            <TemplateConfig>
              <option name="controllerTemplate" value="package  ${package};&#10;&#10;import ${servicePackage}.${fileName}Service;&#10;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.PostMapping;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;/**&#10; * @Author: ${author}&#10; * @Description: 描述&#10; * @Date: 创建于${time}&#10; **/&#10;@RestController&#10;@RequestMapping(&quot;/${fileName}&quot;)&#10;public class ${fileName}Controller{&#10;&#10;&#10;    @Autowired&#10;    private ${fileName}Service ${fileName.toLowerCaseFirstOne()}Service;&#10;&#10;&#10;    @GetMapping(&quot;/list&quot;)&#10;    public Object list() {&#10;        return ${fileName.toLowerCaseFirstOne()}Service.list();&#10;    }&#10;&#10;&#10;    @PostMapping(&quot;/change&quot;)&#10;    public Object change() {&#10;        return ${fileName.toLowerCaseFirstOne()}Service.change();&#10;    }&#10;&#10;&#10;    @PostMapping(&quot;/delete&quot;)&#10;    public Object delete(int id) {&#10;        return ${fileName.toLowerCaseFirstOne()}Service.delete(id);&#10;    }&#10;&#10;&#10;}&#10;" />
              <option name="flowTemplate" value="package ${package};&#10;import org.apache.commons.logging.Log;&#10;import org.apache.commons.logging.LogFactory;&#10;import com.seeyon.ctp.workflow.event.AbstractWorkflowEvent;&#10;import com.seeyon.ctp.workflow.event.WorkflowEventData;&#10;import com.seeyon.ctp.workflow.event.WorkflowEventResult;&#10;&#10;public class FlowEvent extends AbstractWorkflowEvent {&#10;    private static final Log log = LogFactory.getLog(FlowEvent.class);&#10;&#10;    @Override&#10;    public String getId() {// 这个是唯一ID&#10;        return &quot;myWorkflowEvent&quot;;&#10;    }&#10;&#10;    @Override&#10;    public String getLabel() {//这个是在开发高级里面显示的事件名称&#10;        return &quot;我的流程事件&quot;;&#10;    }&#10;&#10;    @Override&#10;    public ApplicationCategoryEnum getAppName() {&#10;        return ApplicationCategoryEnum.form;&#10;    }&#10;&#10;    @Inject&#10;    private FormApi4Cap4 formApi4Cap4;&#10;&#10;    @Inject&#10;    private ColManager colManager;&#10;&#10;    //注意所有的中断操作，都只能在“前事件”通过设置setAlertMessage来完成，比如想在发起做中断判断，只能在发起前事件，而不能再发起事件中设置，否则中断无效&#10;    // 流程事件：发起前事件&#10;    public WorkflowEventResult onBeforeStart(WorkflowEventData data) {&#10;        log.info(&quot;onBeforeStart发起前事件：&quot;);&#10;        WorkflowEventResult error = new WorkflowEventResult();&#10;        try{&#10;            FormDataMasterBean masterBean = (FormDataMasterBean) data.getBusinessData().get(&quot;formDataBean&quot;);&#10;            FormBean cap4FormBean = formApi4Cap4.getForm(Long.valueOf(data.getFormApp()));&#10;            ColSummary colSummary = colManager.getColSummaryById(data.getSummaryId());&#10;        }catch(Exception e){&#10;            log.error(&quot; onBeforeStart exception:&quot;+e.getMessage(),e);&#10;            error.setAlertMessage(&quot;error:&quot;+e.getMessage());//设置则流程流转会被中断&#10;            return error;&#10;        }&#10;        return null;//NULL 流程可以正常走&#10;    }&#10;&#10;    //流程事件：发起事件&#10;    public void onStart(WorkflowEventData data) {&#10;    }&#10;&#10;    //流程事件：终止前事件&#10;    public WorkflowEventResult onBeforeStop(WorkflowEventData data) {&#10;        return null;&#10;    }&#10;&#10;    //流程事件：终止事件&#10;    public void onStop(WorkflowEventData data) {&#10;    }&#10;&#10;    //流程事件：撤销前事件&#10;    public WorkflowEventResult onBeforeCancel(WorkflowEventData data) {&#10;        return null;&#10;    }&#10;&#10;    //流程事件：撤销事件&#10;    public void onCancel(WorkflowEventData data) {&#10;    }&#10;&#10;    //流程事件：结束事件&#10;    public void onProcessFinished(WorkflowEventData data) {&#10;    }&#10;&#10;    //节点操作事件：处理前事件&#10;    public WorkflowEventResult onBeforeFinishWorkitem(WorkflowEventData data) {&#10;        return null;&#10;    }&#10;&#10;    //节点操作事件：处理事件&#10;    public void onFinishWorkitem(WorkflowEventData data) {&#10;&#10;    }&#10;&#10;    //节点操作事件：回退前事件&#10;    public WorkflowEventResult onBeforeStepBack(WorkflowEventData data) {&#10;        return null;&#10;    }&#10;&#10;    //节点操作事件：回退事件&#10;    public void onStepBack(WorkflowEventData data) {&#10;&#10;    }&#10;&#10;    //节点操作事件：取回前事件&#10;    public WorkflowEventResult onBeforeTakeBack(WorkflowEventData data) {&#10;        return null;&#10;    }&#10;&#10;    //节点操作事件：取回事件&#10;    public void onTakeBack(WorkflowEventData data) {&#10;    }&#10;}&#10;" />
              <option name="implTemplate" value="package ${package};&#10;&#10;import ${servicePackage}.${fileName}Service;&#10;import org.springframework.stereotype.Service;&#10;&#10;/**&#10; * @Author: ${author}&#10; * @Description: 描述&#10; * @Date:  创建于${time}&#10; **/&#10;@Service&#10;public class ${fileName}ServiceImpl implements ${fileName}Service {&#10;&#10;    @Override&#10;    public Object list() {&#10;        return null;&#10;    }&#10;&#10;    @Override&#10;    public Object change() {&#10;        return null;&#10;    }&#10;&#10;    @Override&#10;    public Object delete(int id) {&#10;        return null;&#10;    }&#10;&#10;}&#10;" />
              <option name="initPluginTemplate" value="package ${package};&#10;&#10;&#10;import org.apache.commons.logging.Log;&#10;import org.apache.commons.logging.LogFactory;&#10;import com.seeyon.ctp.common.AppContext;&#10;import com.seeyon.ctp.common.AbstractSystemInitializer;&#10;import org.springframework.stereotype.Component;&#10;&#10;/**&#10; * @Author: ${author}&#10; * @Description: 描述&#10; * @Date: 创建于${time}&#10; **/&#10;@Component(&quot;${fileName}Initializer&quot;)&#10;public class ${fileName}Initializer extends AbstractSystemInitializer {&#10;&#10;    private static final Log log = LogFactory.getLog(${fileName}Initializer.class);&#10;&#10;    @Override&#10;    public void initialize() {&#10;        System.out.println(&quot;加载${fileName}插件&quot;);&#10;        log.info(&quot;加载${fileName}插件&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void destroy() {&#10;        System.out.println(&quot;销毁${fileName}插件&quot;);&#10;        log.info(&quot;销毁${fileName}插件&quot;);&#10;    }&#10;}&#10;" />
              <option name="listeningTemplate" value="package ${package};&#10;&#10;import com.seeyon.apps.collaboration.event.CollaborationStartEvent;&#10;import com.seeyon.apps.collaboration.event.CollaborationProcessEvent;&#10;import com.seeyon.apps.collaboration.event.CollaborationFinishEvent;&#10;import com.seeyon.apps.collaboration.event.CollaborationCancelEvent;&#10;import com.seeyon.apps.collaboration.event.CollaborationStepBackEvent;&#10;import com.seeyon.apps.collaboration.event.CollaborationStopEvent;&#10;import com.seeyon.apps.collaboration.event.CollaborationAddCommentEvent;&#10;import com.seeyon.apps.collaboration.event.CollaborationAppointStepBackEvent;&#10;import com.seeyon.apps.collaboration.event.CollaborationAutoSkipEvent;&#10;import com.seeyon.apps.collaboration.event.CollaborationDelEvent;&#10;import com.seeyon.apps.collaboration.event.CollaborationTakeBackEvent;&#10;import com.seeyon.ctp.organization.event.AddAccountEvent;&#10;import com.seeyon.ctp.organization.event.AddBatchMemberEvent;&#10;import com.seeyon.ctp.organization.event.AddConCurrentPostEvent;&#10;import com.seeyon.ctp.organization.event.AddDepartmentEvent;&#10;import com.seeyon.ctp.organization.event.AddDutyLevelEvent;&#10;import com.seeyon.ctp.organization.event.AddLevelEvent;&#10;import com.seeyon.ctp.organization.event.AddMemberEvent;&#10;import com.seeyon.ctp.organization.event.AddPostEvent;&#10;import com.seeyon.ctp.organization.event.AddTeamEvent;&#10;import com.seeyon.ctp.organization.event.ChangePwdEvent;&#10;import com.seeyon.ctp.organization.event.DeleteAccountEvent;&#10;import com.seeyon.ctp.organization.event.DeleteConCurrentPostEvent;&#10;import com.seeyon.ctp.organization.event.DeleteDepartmentEvent;&#10;import com.seeyon.ctp.organization.event.DeleteDutyLevelEvent;&#10;import com.seeyon.ctp.organization.event.DeleteLevelEvent;&#10;import com.seeyon.ctp.organization.event.DeleteMemberEvent;&#10;import com.seeyon.ctp.organization.event.DeletePostEvent;&#10;import com.seeyon.ctp.organization.event.DeleteTeamEvent;&#10;import com.seeyon.ctp.organization.event.MemberAccountChangeEvent;&#10;import com.seeyon.ctp.organization.event.MemberUpdateDeptEvent;&#10;import com.seeyon.ctp.organization.event.MoveDepartmentEvent;&#10;import com.seeyon.ctp.organization.event.UpdateAccountEvent;&#10;import com.seeyon.ctp.organization.event.UpdateDepartmentEvent;&#10;import com.seeyon.ctp.organization.event.UpdateDeptRoleEvent;&#10;import com.seeyon.ctp.organization.event.UpdateDutyLevelEvent;&#10;import com.seeyon.ctp.organization.event.UpdateLevelEvent;&#10;import com.seeyon.ctp.organization.event.UpdateMemberEvent;&#10;import com.seeyon.ctp.organization.event.UpdateMemberRoleEvent;&#10;import com.seeyon.ctp.organization.event.UpdatePostEvent;&#10;import com.seeyon.ctp.organization.event.UpdateTeamEvent;&#10;import com.seeyon.v3x.edoc.event.EdocSignEvent;&#10;import com.seeyon.apps.bulletin.event.BulletinAddEvent;&#10;import com.seeyon.apps.news.event.NewsAddEvent;&#10;import com.seeyon.ctp.common.exceptions.BusinessException;&#10;import com.seeyon.ctp.util.annotation.ListenEvent;&#10;&#10;public class EventListeners {&#10;    &#10;    @ListenEvent(event = UpdateMemberEvent.class, async = true)&#10;    public void UpdateMemberEvent(UpdateMemberEvent event) throws BusinessException {&#10;        System.out.println(&quot;人员修改事件&quot;);&#10;    }&#10;    @ListenEvent(event = DeleteAccountEvent.class, async = true)&#10;    public void DeleteAccountEvent(DeleteAccountEvent event) throws BusinessException {&#10;        System.out.println(&quot;删除单位事件&quot;);&#10;    }&#10;    @ListenEvent(event = DeleteDutyLevelEvent.class, async = true)&#10;    public void DeleteDutyLevelEvent(DeleteDutyLevelEvent event) throws BusinessException {&#10;        System.out.println(&quot;(政务)删除职务级别事件&quot;);&#10;    }&#10;    @ListenEvent(event = AddLevelEvent.class, async = true)&#10;    public void AddLevelEvent(AddLevelEvent event) throws BusinessException {&#10;        System.out.println(&quot;新增职务级别事件&quot;);&#10;    }&#10;    @ListenEvent(event = UpdateAccountEvent.class, async = true)&#10;    public void UpdateAccountEvent(UpdateAccountEvent event) throws BusinessException {&#10;        System.out.println(&quot;单位修改事件&quot;);&#10;    }&#10;    @ListenEvent(event = DeletePostEvent.class, async = true)&#10;    public void DeletePostEvent(DeletePostEvent event) throws BusinessException {&#10;        System.out.println(&quot;删除岗位事件&quot;);&#10;    }&#10;    @ListenEvent(event = UpdateMemberRoleEvent.class, async = true)&#10;    public void UpdateMemberRoleEvent(UpdateMemberRoleEvent event) throws BusinessException {&#10;        System.out.println(&quot;人员角色修改事件&quot;);&#10;    }&#10;    @ListenEvent(event = AddPostEvent.class, async = true)&#10;    public void AddPostEvent(AddPostEvent event) throws BusinessException {&#10;        System.out.println(&quot;新增岗位事件&quot;);&#10;    }&#10;    @ListenEvent(event = CollaborationStepBackEvent.class, async = true)&#10;    public void CollaborationStepBackEvent(CollaborationStepBackEvent event) throws BusinessException {&#10;        System.out.println(&quot;流程回退事件&quot;);&#10;    }&#10;    @ListenEvent(event = MemberUpdateDeptEvent.class, async = true)&#10;    public void MemberUpdateDeptEvent(MemberUpdateDeptEvent event) throws BusinessException {&#10;        System.out.println(&quot;人员部门变动事件&quot;);&#10;    }&#10;    @ListenEvent(event = UpdateDutyLevelEvent.class, async = true)&#10;    public void UpdateDutyLevelEvent(UpdateDutyLevelEvent event) throws BusinessException {&#10;        System.out.println(&quot;(政务)职务级别修改事件&quot;);&#10;    }&#10;    @ListenEvent(event = AddConCurrentPostEvent.class, async = true)&#10;    public void AddConCurrentPostEvent(AddConCurrentPostEvent event) throws BusinessException {&#10;        System.out.println(&quot;新增兼职事件&quot;);&#10;    }&#10;    @ListenEvent(event = AddAccountEvent.class, async = true)&#10;    public void AddAccountEvent(AddAccountEvent event) throws BusinessException {&#10;        System.out.println(&quot;新增单位事件&quot;);&#10;    }&#10;    @ListenEvent(event = CollaborationDelEvent.class, async = true)&#10;    public void CollaborationDelEvent(CollaborationDelEvent event) throws BusinessException {&#10;        System.out.println(&quot;(V61)流程删除事件&quot;);&#10;    }&#10;    @ListenEvent(event = DeleteLevelEvent.class, async = true)&#10;    public void DeleteLevelEvent(DeleteLevelEvent event) throws BusinessException {&#10;        System.out.println(&quot;删除职务级别事件&quot;);&#10;    }&#10;    @ListenEvent(event = CollaborationStartEvent.class, async = true)&#10;    public void CollaborationStartEvent(CollaborationStartEvent event) throws BusinessException {&#10;        System.out.println(&quot;流程发起事件&quot;);&#10;    }&#10;    @ListenEvent(event = AddBatchMemberEvent.class, async = true)&#10;    public void AddBatchMemberEvent(AddBatchMemberEvent event) throws BusinessException {&#10;        System.out.println(&quot;批量增加人员事件&quot;);&#10;    }&#10;    @ListenEvent(event = DeleteDepartmentEvent.class, async = true)&#10;    public void DeleteDepartmentEvent(DeleteDepartmentEvent event) throws BusinessException {&#10;        System.out.println(&quot;删除部门事件&quot;);&#10;    }&#10;    @ListenEvent(event = DeleteTeamEvent.class, async = true)&#10;    public void DeleteTeamEvent(DeleteTeamEvent event) throws BusinessException {&#10;        System.out.println(&quot;删除组事件&quot;);&#10;    }&#10;    @ListenEvent(event = AddDepartmentEvent.class, async = true)&#10;    public void AddDepartmentEvent(AddDepartmentEvent event) throws BusinessException {&#10;        System.out.println(&quot;新增部门事件&quot;);&#10;    }&#10;    @ListenEvent(event = CollaborationCancelEvent.class, async = true)&#10;    public void CollaborationCancelEvent(CollaborationCancelEvent event) throws BusinessException {&#10;        System.out.println(&quot;流程撤销事件&quot;);&#10;    }&#10;    @ListenEvent(event = CollaborationFinishEvent.class, async = true)&#10;    public void CollaborationFinishEvent(CollaborationFinishEvent event) throws BusinessException {&#10;        System.out.println(&quot;流程结束事件&quot;);&#10;    }&#10;    @ListenEvent(event = AddMemberEvent.class, async = true)&#10;    public void AddMemberEvent(AddMemberEvent event) throws BusinessException {&#10;        System.out.println(&quot;新增人员事件&quot;);&#10;    }&#10;    @ListenEvent(event = AddTeamEvent.class, async = true)&#10;    public void AddTeamEvent(AddTeamEvent event) throws BusinessException {&#10;        System.out.println(&quot;新增组事件&quot;);&#10;    }&#10;    @ListenEvent(event = UpdatePostEvent.class, async = true)&#10;    public void UpdatePostEvent(UpdatePostEvent event) throws BusinessException {&#10;        System.out.println(&quot;岗位修改事件&quot;);&#10;    }&#10;    @ListenEvent(event = MoveDepartmentEvent.class, async = true)&#10;    public void MoveDepartmentEvent(MoveDepartmentEvent event) throws BusinessException {&#10;        System.out.println(&quot;移动部门事件&quot;);&#10;    }&#10;    @ListenEvent(event = MemberAccountChangeEvent.class, async = true)&#10;    public void MemberAccountChangeEvent(MemberAccountChangeEvent event) throws BusinessException {&#10;        System.out.println(&quot;人员单位变动事件&quot;);&#10;    }&#10;    @ListenEvent(event = CollaborationProcessEvent.class, async = true)&#10;    public void CollaborationProcessEvent(CollaborationProcessEvent event) throws BusinessException {&#10;        System.out.println(&quot;流程处理事件&quot;);&#10;    }&#10;    @ListenEvent(event = EdocSignEvent.class, async = true)&#10;    public void EdocSignEvent(EdocSignEvent event) throws BusinessException {&#10;        System.out.println(&quot;公文签收事件监听&quot;);&#10;    }&#10;    @ListenEvent(event = ChangePwdEvent.class, async = true)&#10;    public void ChangePwdEvent(ChangePwdEvent event) throws BusinessException {&#10;        System.out.println(&quot;修改密码事件&quot;);&#10;    }&#10;    @ListenEvent(event = CollaborationAppointStepBackEvent.class, async = true)&#10;    public void CollaborationAppointStepBackEvent(CollaborationAppointStepBackEvent event) throws BusinessException {&#10;        System.out.println(&quot;(V61)流程指定回退事件&quot;);&#10;    }&#10;    @ListenEvent(event = UpdateDeptRoleEvent.class, async = true)&#10;    public void UpdateDeptRoleEvent(UpdateDeptRoleEvent event) throws BusinessException {&#10;        System.out.println(&quot;部门角色修改事件&quot;);&#10;    }&#10;    @ListenEvent(event = CollaborationTakeBackEvent.class, async = true)&#10;    public void CollaborationTakeBackEvent(CollaborationTakeBackEvent event) throws BusinessException {&#10;        System.out.println(&quot;(V61)流程取回事件&quot;);&#10;    }&#10;    @ListenEvent(event = DeleteMemberEvent.class, async = true)&#10;    public void DeleteMemberEvent(DeleteMemberEvent event) throws BusinessException {&#10;        System.out.println(&quot;删除人员事件&quot;);&#10;    }&#10;    @ListenEvent(event = UpdateDepartmentEvent.class, async = true)&#10;    public void UpdateDepartmentEvent(UpdateDepartmentEvent event) throws BusinessException {&#10;        System.out.println(&quot;部门修改事件&quot;);&#10;    }&#10;    @ListenEvent(event = CollaborationAutoSkipEvent.class, async = true)&#10;    public void CollaborationAutoSkipEvent(CollaborationAutoSkipEvent event) throws BusinessException {&#10;        System.out.println(&quot;(V61)流程自动跳过事件&quot;);&#10;    }&#10;    @ListenEvent(event = BulletinAddEvent.class, async = true)&#10;    public void BulletinAddEvent(BulletinAddEvent event) throws BusinessException {&#10;        System.out.println(&quot;公告发起监听事件&#9;&quot;);&#10;    }&#10;    @ListenEvent(event = DeleteConCurrentPostEvent.class, async = true)&#10;    public void DeleteConCurrentPostEvent(DeleteConCurrentPostEvent event) throws BusinessException {&#10;        System.out.println(&quot;删除兼职事件&quot;);&#10;    }&#10;    @ListenEvent(event = UpdateLevelEvent.class, async = true)&#10;    public void UpdateLevelEvent(UpdateLevelEvent event) throws BusinessException {&#10;        System.out.println(&quot;职务级别修改事件&quot;);&#10;    }&#10;    @ListenEvent(event = UpdateTeamEvent.class, async = true)&#10;    public void UpdateTeamEvent(UpdateTeamEvent event) throws BusinessException {&#10;        System.out.println(&quot;组修改事件&quot;);&#10;    }&#10;    @ListenEvent(event = NewsAddEvent.class, async = true)&#10;    public void NewsAddEvent(NewsAddEvent event) throws BusinessException {&#10;        System.out.println(&quot;新闻发起监听事件&quot;);&#10;    }&#10;    @ListenEvent(event = CollaborationStopEvent.class, async = true)&#10;    public void CollaborationStopEvent(CollaborationStopEvent event) throws BusinessException {&#10;        System.out.println(&quot;流程终止事件&quot;);&#10;    }&#10;    @ListenEvent(event = CollaborationAddCommentEvent.class, async = true)&#10;    public void CollaborationAddCommentEvent(CollaborationAddCommentEvent event) throws BusinessException {&#10;        System.out.println(&quot;(V61)流程处理回复监听事件&quot;);&#10;    }&#10;    @ListenEvent(event = AddDutyLevelEvent.class, async = true)&#10;    public void AddDutyLevelEvent(AddDutyLevelEvent event) throws BusinessException {&#10;        System.out.println(&quot;(政务)新增职务级别事件&quot;);&#10;    }&#10;}&#10;" />
              <option name="pomTemplate" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#13;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#13;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;&#13;&#10;&#13;&#10;    &lt;parent&gt;&#13;&#10;        &lt;groupId&gt;com.seeyon&lt;/groupId&gt;&#13;&#10;        &lt;artifactId&gt;apps-root&lt;/artifactId&gt;&#13;&#10;        &lt;version&gt;${appVersion}&lt;/version&gt;&#13;&#10;    &lt;/parent&gt;&#13;&#10;&#13;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#13;&#10;&#13;&#10;    &lt;artifactId&gt;apps-customize-${fileName.toLowerCaseFirstOne()}&lt;/artifactId&gt;&#13;&#10;    &lt;version&gt;${apps.version}&lt;/version&gt;&#13;&#10;&#13;&#10;    &lt;dependencies&gt;&#13;&#10;        &lt;dependency&gt;&#13;&#10;            &lt;groupId&gt;com.seeyon&lt;/groupId&gt;&#13;&#10;            &lt;artifactId&gt;cap-core&lt;/artifactId&gt;&#13;&#10;            &lt;version&gt;${apps.version}&lt;/version&gt;&#13;&#10;        &lt;/dependency&gt;&#13;&#10;        &lt;dependency&gt;&#13;&#10;            &lt;groupId&gt;com.seeyon&lt;/groupId&gt;&#13;&#10;            &lt;artifactId&gt;aspose-words-jdk17&lt;/artifactId&gt;&#13;&#10;            &lt;version&gt;1.0.0&lt;/version&gt;&#13;&#10;        &lt;/dependency&gt;&#13;&#10;        &lt;dependency&gt;&#13;&#10;            &lt;groupId&gt;com.seeyon&lt;/groupId&gt;&#13;&#10;            &lt;artifactId&gt;apps-soap&lt;/artifactId&gt;&#13;&#10;            &lt;version&gt;${ctp.version}&lt;/version&gt;&#13;&#10;        &lt;/dependency&gt;&#13;&#10;        &lt;dependency&gt;&#13;&#10;            &lt;groupId&gt;com.seeyon&lt;/groupId&gt;&#13;&#10;            &lt;artifactId&gt;apps-collaboration&lt;/artifactId&gt;&#13;&#10;            &lt;version&gt;${ctp.version}&lt;/version&gt;&#13;&#10;        &lt;/dependency&gt;&#13;&#10;        &lt;dependency&gt;&#13;&#10;            &lt;groupId&gt;com.seeyon&lt;/groupId&gt;&#13;&#10;            &lt;artifactId&gt;apps-bulletin&lt;/artifactId&gt;&#13;&#10;            &lt;version&gt;${ctp.version}&lt;/version&gt;&#13;&#10;        &lt;/dependency&gt;&#13;&#10;        &lt;dependency&gt;&#13;&#10;            &lt;groupId&gt;com.seeyon&lt;/groupId&gt;&#13;&#10;            &lt;artifactId&gt;cap-runtime&lt;/artifactId&gt;&#13;&#10;            &lt;version&gt;${ctp.version}&lt;/version&gt;&#13;&#10;        &lt;/dependency&gt;&#13;&#10;        &lt;dependency&gt;&#13;&#10;            &lt;groupId&gt;com.seeyon&lt;/groupId&gt;&#13;&#10;            &lt;artifactId&gt;ctp-workflow&lt;/artifactId&gt;&#13;&#10;            &lt;version&gt;${ctp.version}&lt;/version&gt;&#13;&#10;        &lt;/dependency&gt;&#13;&#10;    &lt;/dependencies&gt;&#13;&#10;&#13;&#10;&lt;/project&gt;" />
              <option name="serviceTemplate" value="package ${package};&#10;&#10;import org.springframework.stereotype.Service;&#10;&#10;/**&#10; * @Author: ${author}&#10; * @Description:&#10; * @Date: 创建于${time}&#10; **/&#10;@Service&#10;public interface ${fileName}Service {&#10;&#10;    /**&#10;     * 列表&#10;     *&#10;     * @return&#10;     */&#10;    Object list();&#10;&#10;&#10;    /**&#10;     * 修改/新增&#10;     *&#10;     * @return 用户id&#10;     */&#10;    Object change();&#10;&#10;&#10;    /**&#10;     * 删除&#10;     *&#10;     * @param id&#10;     * @return&#10;     */&#10;     Object delete(int id);&#10;}&#10;" />
              <option name="springCfgTemplate" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;plugin&gt;&#10;    &lt;id&gt;${fileName.toLowerCaseFirstOne()}&lt;/id&gt;&#10;    &lt;name&gt;${pluginName}&lt;/name&gt;&#10;    &lt;category&gt;${pluginId}&lt;/category&gt;&#10;&lt;/plugin&gt;" />
              <option name="springControllerTemplate" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;!DOCTYPE beans PUBLIC &quot;-//SPRING//DTD BEAN//EN&quot; &quot;http://www.springframework.org/dtd/spring-beans.dtd&quot;&gt;&#10;&#10;&lt;beans default-autowire=&quot;byName&quot; default-lazy-init=&quot;false&quot; default-dependency-check=&quot;none&quot;&gt;&#10;    &lt;bean name=&quot;/${fileName.toLowerCaseFirstOne()}/${fileName.toLowerCaseFirstOne()}.do&quot; class=&quot;com.seeyon.apps.${fileName.toLowerCaseFirstOne()}.controller.${fileName}Controller&quot;/&gt;&#10;&lt;/beans&gt;&#10;" />
              <option name="springManagerTemplate" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;!DOCTYPE beans PUBLIC &quot;-//SPRING//DTD BEAN//EN&quot; &quot;http://www.springframework.org/dtd/spring-beans.dtd&quot;&gt;&#10;&#10;&lt;beans default-autowire=&quot;byName&quot; default-lazy-init=&quot;false&quot; default-dependency-check=&quot;none&quot;&gt;&#10;    &lt;bean id=&quot;${fileName.toLowerCaseFirstOne()}Manager&quot; class=&quot;com.seeyon.apps.${fileName.toLowerCaseFirstOne()}.manager.impl.${fileName}ManagerImpl&quot;/&gt;&#10;&lt;/beans&gt;&#10;" />
              <option name="springPluginTemplate" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;beans default-autowire=&quot;byName&quot;&#10;       xmlns=&quot;http://www.springframework.org/schema/beans&quot;&#10;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;&#10;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans&#10;       http://www.springframework.org/schema/beans/spring-beans.xsd&#10;       http://www.springframework.org/schema/context&#10;       http://www.springframework.org/schema/context/spring-context.xsd&quot;&#10;&gt;&#10;    &lt;context:component-scan base-package=&quot;com.seeyon.apps.${fileName.toLowerCaseFirstOne()}&quot; /&gt;&#10;&lt;/beans&gt;&#10;&#10;" />
              <option name="springPropertyTemplate" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;ctpConfig&gt;&#10;    &lt;${fileName.toLowerCaseFirstOne()}&gt;&#10;        &lt;${fileName.toLowerCaseFirstOne()}Node mark=&quot;{VE}&quot; desc=&quot;配置信息&quot;&gt;&lt;/${fileName.toLowerCaseFirstOne()}Node&gt;&#10;    &lt;/${fileName.toLowerCaseFirstOne()}&gt;&#10;&lt;/ctpConfig&gt;" />
              <option name="ssoTemplate" value="package ${package};&#10;&#10;import com.seeyon.ctp.portal.sso.SSOLoginHandshakeAbstract;&#10;&#10;&#10;public class SsoLoginHandshake  extends SSOLoginHandshakeAbstract {&#10;     &#10;     /**&#10;     *握手方法，通过传入ticket获取对应的协同登录名&#10;     *注意：【V6.1如果ticket不加密则无法正常登录】：示例中ticket未加密，正式开发中请一定对登录名加密，否则有安全隐患！&#10;     * @return 返回ticket对应的协同登录名&#10;     */&#10;     public String handshake(String ticket) {&#10;          String userLogninName = &quot;&quot;;&#10;          if(ticket==null||ticket.equals(&quot;&quot;)) {&#10;               return null;&#10;          }&#10;          userLogninName = ticket;&#10;          return userLogninName;&#10;     }&#10;     &#10;     /**&#10;     * 注销单点登录&#10;     * @return &#10;     */&#10;     public void logoutNotify(String ticket) {&#10;          &#10;     }&#10;}" />
            </TemplateConfig>
          </value>
        </entry>
        <entry key="SIMPLE">
          <value>
            <TemplateConfig>
              <option name="controllerTemplate" value="package ${package};&#10;&#10;import ${servicePackage}.${fileName}Manager;&#10;import org.apache.commons.logging.Log;&#10;import org.apache.commons.logging.LogFactory;&#10;import org.springframework.web.servlet.ModelAndView;&#10;import javax.servlet.http.HttpServletRequest;&#10;import javax.servlet.http.HttpServletResponse;&#10;import com.seeyon.ctp.common.AppContext;&#10;import com.seeyon.ctp.common.controller.BaseController;&#10;import org.springframework.stereotype.Controller;&#10;import java.io.IOException;&#10;&#10;/**&#10; * @Author: ${author}&#10; * @Description: 描述&#10; * @Date: 创建于${time}&#10; * 基于注解实现，更多实现查看基类 BaseController&#10; **/&#10;@Controller(&quot;/${fileName}.do&quot;)&#10;public class ${fileName}Controller extends BaseController {&#10;&#10;    private static final Log log = LogFactory.getLog(${fileName}Controller.class);&#10;&#10;    public ModelAndView index(HttpServletRequest request, HttpServletResponse response) throws Exception {&#10;        response.setHeader(&quot;Content-type&quot;, &quot;text/html;charset=UTF-8&quot;);&#10;        response.setCharacterEncoding(&quot;utf-8&quot;);&#10;        try {&#10;            request.setCharacterEncoding(&quot;utf-8&quot;);&#10;            response.getWriter().print(&quot;首页&quot;);&#10;            response.getWriter().close();&#10;        } catch (IOException e) {&#10;            log.error(e.getMessage(),e);&#10;        }&#10;        return null;&#10;    }&#10;&#10;}&#10;" />
              <option name="flowTemplate" value="package ${package};&#10;import org.apache.commons.logging.Log;&#10;import org.apache.commons.logging.LogFactory;&#10;import com.seeyon.ctp.workflow.event.AbstractWorkflowEvent;&#10;import com.seeyon.ctp.workflow.event.WorkflowEventData;&#10;import com.seeyon.ctp.workflow.event.WorkflowEventResult;&#10;&#10;public class FlowEvent extends AbstractWorkflowEvent {&#10;    private static final Log log = LogFactory.getLog(FlowEvent.class);&#10;&#10;    @Override&#10;    public String getId() {// 这个是唯一ID&#10;        return &quot;myWorkflowEvent&quot;;&#10;    }&#10;&#10;    @Override&#10;    public String getLabel() {//这个是在开发高级里面显示的事件名称&#10;        return &quot;我的流程事件&quot;;&#10;    }&#10;&#10;    @Override&#10;    public ApplicationCategoryEnum getAppName() {&#10;        return ApplicationCategoryEnum.form;&#10;    }&#10;&#10;    @Inject&#10;    private FormApi4Cap4 formApi4Cap4;&#10;&#10;    @Inject&#10;    private ColManager colManager;&#10;&#10;    //注意所有的中断操作，都只能在“前事件”通过设置setAlertMessage来完成，比如想在发起做中断判断，只能在发起前事件，而不能再发起事件中设置，否则中断无效&#10;    // 流程事件：发起前事件&#10;    public WorkflowEventResult onBeforeStart(WorkflowEventData data) {&#10;        log.info(&quot;onBeforeStart发起前事件：&quot;);&#10;        WorkflowEventResult error = new WorkflowEventResult();&#10;        try{&#10;            FormDataMasterBean masterBean = (FormDataMasterBean) data.getBusinessData().get(&quot;formDataBean&quot;);&#10;            FormBean cap4FormBean = formApi4Cap4.getForm(Long.valueOf(data.getFormApp()));&#10;            ColSummary colSummary = colManager.getColSummaryById(data.getSummaryId());&#10;        }catch(Exception e){&#10;            log.error(&quot; onBeforeStart exception:&quot;+e.getMessage(),e);&#10;            error.setAlertMessage(&quot;error:&quot;+e.getMessage());//设置则流程流转会被中断&#10;            return error;&#10;        }&#10;        return null;//NULL 流程可以正常走&#10;    }&#10;&#10;    //流程事件：发起事件&#10;    public void onStart(WorkflowEventData data) {&#10;    }&#10;&#10;    //流程事件：终止前事件&#10;    public WorkflowEventResult onBeforeStop(WorkflowEventData data) {&#10;        return null;&#10;    }&#10;&#10;    //流程事件：终止事件&#10;    public void onStop(WorkflowEventData data) {&#10;    }&#10;&#10;    //流程事件：撤销前事件&#10;    public WorkflowEventResult onBeforeCancel(WorkflowEventData data) {&#10;        return null;&#10;    }&#10;&#10;    //流程事件：撤销事件&#10;    public void onCancel(WorkflowEventData data) {&#10;    }&#10;&#10;    //流程事件：结束事件&#10;    public void onProcessFinished(WorkflowEventData data) {&#10;    }&#10;&#10;    //节点操作事件：处理前事件&#10;    public WorkflowEventResult onBeforeFinishWorkitem(WorkflowEventData data) {&#10;        return null;&#10;    }&#10;&#10;    //节点操作事件：处理事件&#10;    public void onFinishWorkitem(WorkflowEventData data) {&#10;&#10;    }&#10;&#10;    //节点操作事件：回退前事件&#10;    public WorkflowEventResult onBeforeStepBack(WorkflowEventData data) {&#10;        return null;&#10;    }&#10;&#10;    //节点操作事件：回退事件&#10;    public void onStepBack(WorkflowEventData data) {&#10;&#10;    }&#10;&#10;    //节点操作事件：取回前事件&#10;    public WorkflowEventResult onBeforeTakeBack(WorkflowEventData data) {&#10;        return null;&#10;    }&#10;&#10;    //节点操作事件：取回事件&#10;    public void onTakeBack(WorkflowEventData data) {&#10;    }&#10;}&#10;" />
              <option name="implTemplate" value="package ${package};&#10;&#10;import ${servicePackage}.${fileName}Manager;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import com.seeyon.ctp.util.annotation.AjaxAccess;&#10;import com.seeyon.ctp.util.JDBCAgent;&#10;import com.seeyon.ctp.util.ParamUtil;&#10;import com.seeyon.ctp.util.Strings;&#10;import org.springframework.stereotype.Component;&#10;import com.seeyon.cap4.form.api.FormApi4Cap4;&#10;import com.seeyon.cap4.form.bean.FormBean;&#10;import com.seeyon.cap4.form.bean.FormDataMasterBean;&#10;import com.seeyon.cap4.form.bean.FormFieldBean;&#10;import com.seeyon.ctp.common.AppContext;&#10;import com.seeyon.ctp.common.ctpenumnew.manager.EnumManager;&#10;import com.seeyon.ctp.organization.manager.OrgManager;&#10;import org.apache.commons.logging.Log;&#10;import org.apache.commons.logging.LogFactory;&#10;import com.seeyon.ctp.util.annotation.Inject;&#10;import java.io.IOException;&#10;&#10;/**&#10; * @Author: ${author}&#10; * @Description: 描述&#10; * @Date: 创建于${time}&#10; **/&#10;@Component(&quot;${fileName}Manager&quot;)&#10;public class ${fileName}ManagerImpl implements ${fileName}Manager {&#10;&#10;     private static final Log log = LogFactory.getLog(${fileName}ManagerImpl.class);&#10;&#10;&#10;     @Inject&#10;     private FormApi4Cap4 formApi4Cap4;&#10;&#10;     @Inject&#10;     private EnumManager enumManagerNew;&#10;&#10;     @Inject&#10;     private OrgManager orgManager;&#10;&#10;&#10;     //@Value(&quot;${customformctr.configString}&quot;)&#10;     private String configString;&#10;&#10;}&#10;" />
              <option name="initPluginTemplate" value="package ${package};&#10;&#10;&#10;import org.apache.commons.logging.Log;&#10;import org.apache.commons.logging.LogFactory;&#10;import com.seeyon.ctp.common.AppContext;&#10;import com.seeyon.ctp.common.AbstractSystemInitializer;&#10;import org.springframework.stereotype.Component;&#10;&#10;/**&#10; * @Author: ${author}&#10; * @Description: 描述&#10; * @Date: 创建于${time}&#10; **/&#10;@Component(&quot;${fileName}Initializer&quot;)&#10;public class ${fileName}Initializer extends AbstractSystemInitializer {&#10;&#10;    private static final Log log = LogFactory.getLog(${fileName}Initializer.class);&#10;&#10;    @Override&#10;    public void initialize() {&#10;        System.out.println(&quot;加载${fileName}插件&quot;);&#10;        log.info(&quot;加载${fileName}插件&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void destroy() {&#10;        System.out.println(&quot;销毁${fileName}插件&quot;);&#10;        log.info(&quot;销毁${fileName}插件&quot;);&#10;    }&#10;}&#10;" />
              <option name="listeningTemplate" value="package ${package};&#10;&#10;import com.seeyon.apps.collaboration.event.CollaborationStartEvent;&#10;import com.seeyon.apps.collaboration.event.CollaborationProcessEvent;&#10;import com.seeyon.apps.collaboration.event.CollaborationFinishEvent;&#10;import com.seeyon.apps.collaboration.event.CollaborationCancelEvent;&#10;import com.seeyon.apps.collaboration.event.CollaborationStepBackEvent;&#10;import com.seeyon.apps.collaboration.event.CollaborationStopEvent;&#10;import com.seeyon.apps.collaboration.event.CollaborationAddCommentEvent;&#10;import com.seeyon.apps.collaboration.event.CollaborationAppointStepBackEvent;&#10;import com.seeyon.apps.collaboration.event.CollaborationAutoSkipEvent;&#10;import com.seeyon.apps.collaboration.event.CollaborationDelEvent;&#10;import com.seeyon.apps.collaboration.event.CollaborationTakeBackEvent;&#10;import com.seeyon.ctp.organization.event.AddAccountEvent;&#10;import com.seeyon.ctp.organization.event.AddBatchMemberEvent;&#10;import com.seeyon.ctp.organization.event.AddConCurrentPostEvent;&#10;import com.seeyon.ctp.organization.event.AddDepartmentEvent;&#10;import com.seeyon.ctp.organization.event.AddDutyLevelEvent;&#10;import com.seeyon.ctp.organization.event.AddLevelEvent;&#10;import com.seeyon.ctp.organization.event.AddMemberEvent;&#10;import com.seeyon.ctp.organization.event.AddPostEvent;&#10;import com.seeyon.ctp.organization.event.AddTeamEvent;&#10;import com.seeyon.ctp.organization.event.ChangePwdEvent;&#10;import com.seeyon.ctp.organization.event.DeleteAccountEvent;&#10;import com.seeyon.ctp.organization.event.DeleteConCurrentPostEvent;&#10;import com.seeyon.ctp.organization.event.DeleteDepartmentEvent;&#10;import com.seeyon.ctp.organization.event.DeleteDutyLevelEvent;&#10;import com.seeyon.ctp.organization.event.DeleteLevelEvent;&#10;import com.seeyon.ctp.organization.event.DeleteMemberEvent;&#10;import com.seeyon.ctp.organization.event.DeletePostEvent;&#10;import com.seeyon.ctp.organization.event.DeleteTeamEvent;&#10;import com.seeyon.ctp.organization.event.MemberAccountChangeEvent;&#10;import com.seeyon.ctp.organization.event.MemberUpdateDeptEvent;&#10;import com.seeyon.ctp.organization.event.MoveDepartmentEvent;&#10;import com.seeyon.ctp.organization.event.UpdateAccountEvent;&#10;import com.seeyon.ctp.organization.event.UpdateDepartmentEvent;&#10;import com.seeyon.ctp.organization.event.UpdateDeptRoleEvent;&#10;import com.seeyon.ctp.organization.event.UpdateDutyLevelEvent;&#10;import com.seeyon.ctp.organization.event.UpdateLevelEvent;&#10;import com.seeyon.ctp.organization.event.UpdateMemberEvent;&#10;import com.seeyon.ctp.organization.event.UpdateMemberRoleEvent;&#10;import com.seeyon.ctp.organization.event.UpdatePostEvent;&#10;import com.seeyon.ctp.organization.event.UpdateTeamEvent;&#10;import com.seeyon.v3x.edoc.event.EdocSignEvent;&#10;import com.seeyon.apps.bulletin.event.BulletinAddEvent;&#10;import com.seeyon.apps.news.event.NewsAddEvent;&#10;import com.seeyon.ctp.common.exceptions.BusinessException;&#10;import com.seeyon.ctp.util.annotation.ListenEvent;&#10;&#10;public class EventListeners {&#10;    &#10;    @ListenEvent(event = UpdateMemberEvent.class, async = true)&#10;    public void UpdateMemberEvent(UpdateMemberEvent event) throws BusinessException {&#10;        System.out.println(&quot;人员修改事件&quot;);&#10;    }&#10;    @ListenEvent(event = DeleteAccountEvent.class, async = true)&#10;    public void DeleteAccountEvent(DeleteAccountEvent event) throws BusinessException {&#10;        System.out.println(&quot;删除单位事件&quot;);&#10;    }&#10;    @ListenEvent(event = DeleteDutyLevelEvent.class, async = true)&#10;    public void DeleteDutyLevelEvent(DeleteDutyLevelEvent event) throws BusinessException {&#10;        System.out.println(&quot;(政务)删除职务级别事件&quot;);&#10;    }&#10;    @ListenEvent(event = AddLevelEvent.class, async = true)&#10;    public void AddLevelEvent(AddLevelEvent event) throws BusinessException {&#10;        System.out.println(&quot;新增职务级别事件&quot;);&#10;    }&#10;    @ListenEvent(event = UpdateAccountEvent.class, async = true)&#10;    public void UpdateAccountEvent(UpdateAccountEvent event) throws BusinessException {&#10;        System.out.println(&quot;单位修改事件&quot;);&#10;    }&#10;    @ListenEvent(event = DeletePostEvent.class, async = true)&#10;    public void DeletePostEvent(DeletePostEvent event) throws BusinessException {&#10;        System.out.println(&quot;删除岗位事件&quot;);&#10;    }&#10;    @ListenEvent(event = UpdateMemberRoleEvent.class, async = true)&#10;    public void UpdateMemberRoleEvent(UpdateMemberRoleEvent event) throws BusinessException {&#10;        System.out.println(&quot;人员角色修改事件&quot;);&#10;    }&#10;    @ListenEvent(event = AddPostEvent.class, async = true)&#10;    public void AddPostEvent(AddPostEvent event) throws BusinessException {&#10;        System.out.println(&quot;新增岗位事件&quot;);&#10;    }&#10;    @ListenEvent(event = CollaborationStepBackEvent.class, async = true)&#10;    public void CollaborationStepBackEvent(CollaborationStepBackEvent event) throws BusinessException {&#10;        System.out.println(&quot;流程回退事件&quot;);&#10;    }&#10;    @ListenEvent(event = MemberUpdateDeptEvent.class, async = true)&#10;    public void MemberUpdateDeptEvent(MemberUpdateDeptEvent event) throws BusinessException {&#10;        System.out.println(&quot;人员部门变动事件&quot;);&#10;    }&#10;    @ListenEvent(event = UpdateDutyLevelEvent.class, async = true)&#10;    public void UpdateDutyLevelEvent(UpdateDutyLevelEvent event) throws BusinessException {&#10;        System.out.println(&quot;(政务)职务级别修改事件&quot;);&#10;    }&#10;    @ListenEvent(event = AddConCurrentPostEvent.class, async = true)&#10;    public void AddConCurrentPostEvent(AddConCurrentPostEvent event) throws BusinessException {&#10;        System.out.println(&quot;新增兼职事件&quot;);&#10;    }&#10;    @ListenEvent(event = AddAccountEvent.class, async = true)&#10;    public void AddAccountEvent(AddAccountEvent event) throws BusinessException {&#10;        System.out.println(&quot;新增单位事件&quot;);&#10;    }&#10;    @ListenEvent(event = CollaborationDelEvent.class, async = true)&#10;    public void CollaborationDelEvent(CollaborationDelEvent event) throws BusinessException {&#10;        System.out.println(&quot;(V61)流程删除事件&quot;);&#10;    }&#10;    @ListenEvent(event = DeleteLevelEvent.class, async = true)&#10;    public void DeleteLevelEvent(DeleteLevelEvent event) throws BusinessException {&#10;        System.out.println(&quot;删除职务级别事件&quot;);&#10;    }&#10;    @ListenEvent(event = CollaborationStartEvent.class, async = true)&#10;    public void CollaborationStartEvent(CollaborationStartEvent event) throws BusinessException {&#10;        System.out.println(&quot;流程发起事件&quot;);&#10;    }&#10;    @ListenEvent(event = AddBatchMemberEvent.class, async = true)&#10;    public void AddBatchMemberEvent(AddBatchMemberEvent event) throws BusinessException {&#10;        System.out.println(&quot;批量增加人员事件&quot;);&#10;    }&#10;    @ListenEvent(event = DeleteDepartmentEvent.class, async = true)&#10;    public void DeleteDepartmentEvent(DeleteDepartmentEvent event) throws BusinessException {&#10;        System.out.println(&quot;删除部门事件&quot;);&#10;    }&#10;    @ListenEvent(event = DeleteTeamEvent.class, async = true)&#10;    public void DeleteTeamEvent(DeleteTeamEvent event) throws BusinessException {&#10;        System.out.println(&quot;删除组事件&quot;);&#10;    }&#10;    @ListenEvent(event = AddDepartmentEvent.class, async = true)&#10;    public void AddDepartmentEvent(AddDepartmentEvent event) throws BusinessException {&#10;        System.out.println(&quot;新增部门事件&quot;);&#10;    }&#10;    @ListenEvent(event = CollaborationCancelEvent.class, async = true)&#10;    public void CollaborationCancelEvent(CollaborationCancelEvent event) throws BusinessException {&#10;        System.out.println(&quot;流程撤销事件&quot;);&#10;    }&#10;    @ListenEvent(event = CollaborationFinishEvent.class, async = true)&#10;    public void CollaborationFinishEvent(CollaborationFinishEvent event) throws BusinessException {&#10;        System.out.println(&quot;流程结束事件&quot;);&#10;    }&#10;    @ListenEvent(event = AddMemberEvent.class, async = true)&#10;    public void AddMemberEvent(AddMemberEvent event) throws BusinessException {&#10;        System.out.println(&quot;新增人员事件&quot;);&#10;    }&#10;    @ListenEvent(event = AddTeamEvent.class, async = true)&#10;    public void AddTeamEvent(AddTeamEvent event) throws BusinessException {&#10;        System.out.println(&quot;新增组事件&quot;);&#10;    }&#10;    @ListenEvent(event = UpdatePostEvent.class, async = true)&#10;    public void UpdatePostEvent(UpdatePostEvent event) throws BusinessException {&#10;        System.out.println(&quot;岗位修改事件&quot;);&#10;    }&#10;    @ListenEvent(event = MoveDepartmentEvent.class, async = true)&#10;    public void MoveDepartmentEvent(MoveDepartmentEvent event) throws BusinessException {&#10;        System.out.println(&quot;移动部门事件&quot;);&#10;    }&#10;    @ListenEvent(event = MemberAccountChangeEvent.class, async = true)&#10;    public void MemberAccountChangeEvent(MemberAccountChangeEvent event) throws BusinessException {&#10;        System.out.println(&quot;人员单位变动事件&quot;);&#10;    }&#10;    @ListenEvent(event = CollaborationProcessEvent.class, async = true)&#10;    public void CollaborationProcessEvent(CollaborationProcessEvent event) throws BusinessException {&#10;        System.out.println(&quot;流程处理事件&quot;);&#10;    }&#10;    @ListenEvent(event = EdocSignEvent.class, async = true)&#10;    public void EdocSignEvent(EdocSignEvent event) throws BusinessException {&#10;        System.out.println(&quot;公文签收事件监听&quot;);&#10;    }&#10;    @ListenEvent(event = ChangePwdEvent.class, async = true)&#10;    public void ChangePwdEvent(ChangePwdEvent event) throws BusinessException {&#10;        System.out.println(&quot;修改密码事件&quot;);&#10;    }&#10;    @ListenEvent(event = CollaborationAppointStepBackEvent.class, async = true)&#10;    public void CollaborationAppointStepBackEvent(CollaborationAppointStepBackEvent event) throws BusinessException {&#10;        System.out.println(&quot;(V61)流程指定回退事件&quot;);&#10;    }&#10;    @ListenEvent(event = UpdateDeptRoleEvent.class, async = true)&#10;    public void UpdateDeptRoleEvent(UpdateDeptRoleEvent event) throws BusinessException {&#10;        System.out.println(&quot;部门角色修改事件&quot;);&#10;    }&#10;    @ListenEvent(event = CollaborationTakeBackEvent.class, async = true)&#10;    public void CollaborationTakeBackEvent(CollaborationTakeBackEvent event) throws BusinessException {&#10;        System.out.println(&quot;(V61)流程取回事件&quot;);&#10;    }&#10;    @ListenEvent(event = DeleteMemberEvent.class, async = true)&#10;    public void DeleteMemberEvent(DeleteMemberEvent event) throws BusinessException {&#10;        System.out.println(&quot;删除人员事件&quot;);&#10;    }&#10;    @ListenEvent(event = UpdateDepartmentEvent.class, async = true)&#10;    public void UpdateDepartmentEvent(UpdateDepartmentEvent event) throws BusinessException {&#10;        System.out.println(&quot;部门修改事件&quot;);&#10;    }&#10;    @ListenEvent(event = CollaborationAutoSkipEvent.class, async = true)&#10;    public void CollaborationAutoSkipEvent(CollaborationAutoSkipEvent event) throws BusinessException {&#10;        System.out.println(&quot;(V61)流程自动跳过事件&quot;);&#10;    }&#10;    @ListenEvent(event = BulletinAddEvent.class, async = true)&#10;    public void BulletinAddEvent(BulletinAddEvent event) throws BusinessException {&#10;        System.out.println(&quot;公告发起监听事件&#9;&quot;);&#10;    }&#10;    @ListenEvent(event = DeleteConCurrentPostEvent.class, async = true)&#10;    public void DeleteConCurrentPostEvent(DeleteConCurrentPostEvent event) throws BusinessException {&#10;        System.out.println(&quot;删除兼职事件&quot;);&#10;    }&#10;    @ListenEvent(event = UpdateLevelEvent.class, async = true)&#10;    public void UpdateLevelEvent(UpdateLevelEvent event) throws BusinessException {&#10;        System.out.println(&quot;职务级别修改事件&quot;);&#10;    }&#10;    @ListenEvent(event = UpdateTeamEvent.class, async = true)&#10;    public void UpdateTeamEvent(UpdateTeamEvent event) throws BusinessException {&#10;        System.out.println(&quot;组修改事件&quot;);&#10;    }&#10;    @ListenEvent(event = NewsAddEvent.class, async = true)&#10;    public void NewsAddEvent(NewsAddEvent event) throws BusinessException {&#10;        System.out.println(&quot;新闻发起监听事件&quot;);&#10;    }&#10;    @ListenEvent(event = CollaborationStopEvent.class, async = true)&#10;    public void CollaborationStopEvent(CollaborationStopEvent event) throws BusinessException {&#10;        System.out.println(&quot;流程终止事件&quot;);&#10;    }&#10;    @ListenEvent(event = CollaborationAddCommentEvent.class, async = true)&#10;    public void CollaborationAddCommentEvent(CollaborationAddCommentEvent event) throws BusinessException {&#10;        System.out.println(&quot;(V61)流程处理回复监听事件&quot;);&#10;    }&#10;    @ListenEvent(event = AddDutyLevelEvent.class, async = true)&#10;    public void AddDutyLevelEvent(AddDutyLevelEvent event) throws BusinessException {&#10;        System.out.println(&quot;(政务)新增职务级别事件&quot;);&#10;    }&#10;}&#10;" />
              <option name="pomTemplate" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#13;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#13;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;&#13;&#10;&#13;&#10;    &lt;parent&gt;&#13;&#10;        &lt;groupId&gt;com.seeyon&lt;/groupId&gt;&#13;&#10;        &lt;artifactId&gt;apps-root&lt;/artifactId&gt;&#13;&#10;        &lt;version&gt;${appVersion}&lt;/version&gt;&#13;&#10;    &lt;/parent&gt;&#13;&#10;&#13;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#13;&#10;&#13;&#10;    &lt;artifactId&gt;apps-customize-${fileName.toLowerCaseFirstOne()}&lt;/artifactId&gt;&#13;&#10;    &lt;version&gt;${apps.version}&lt;/version&gt;&#13;&#10;&#13;&#10;    &lt;dependencies&gt;&#13;&#10;        &lt;dependency&gt;&#13;&#10;            &lt;groupId&gt;com.seeyon&lt;/groupId&gt;&#13;&#10;            &lt;artifactId&gt;cap-core&lt;/artifactId&gt;&#13;&#10;            &lt;version&gt;${apps.version}&lt;/version&gt;&#13;&#10;        &lt;/dependency&gt;&#13;&#10;        &lt;dependency&gt;&#13;&#10;            &lt;groupId&gt;com.seeyon&lt;/groupId&gt;&#13;&#10;            &lt;artifactId&gt;aspose-words-jdk17&lt;/artifactId&gt;&#13;&#10;            &lt;version&gt;1.0.0&lt;/version&gt;&#13;&#10;        &lt;/dependency&gt;&#13;&#10;        &lt;dependency&gt;&#13;&#10;            &lt;groupId&gt;com.seeyon&lt;/groupId&gt;&#13;&#10;            &lt;artifactId&gt;apps-soap&lt;/artifactId&gt;&#13;&#10;            &lt;version&gt;${ctp.version}&lt;/version&gt;&#13;&#10;        &lt;/dependency&gt;&#13;&#10;        &lt;dependency&gt;&#13;&#10;            &lt;groupId&gt;com.seeyon&lt;/groupId&gt;&#13;&#10;            &lt;artifactId&gt;apps-collaboration&lt;/artifactId&gt;&#13;&#10;            &lt;version&gt;${ctp.version}&lt;/version&gt;&#13;&#10;        &lt;/dependency&gt;&#13;&#10;        &lt;dependency&gt;&#13;&#10;            &lt;groupId&gt;com.seeyon&lt;/groupId&gt;&#13;&#10;            &lt;artifactId&gt;apps-bulletin&lt;/artifactId&gt;&#13;&#10;            &lt;version&gt;${ctp.version}&lt;/version&gt;&#13;&#10;        &lt;/dependency&gt;&#13;&#10;        &lt;dependency&gt;&#13;&#10;            &lt;groupId&gt;com.seeyon&lt;/groupId&gt;&#13;&#10;            &lt;artifactId&gt;cap-runtime&lt;/artifactId&gt;&#13;&#10;            &lt;version&gt;${ctp.version}&lt;/version&gt;&#13;&#10;        &lt;/dependency&gt;&#13;&#10;        &lt;dependency&gt;&#13;&#10;            &lt;groupId&gt;com.seeyon&lt;/groupId&gt;&#13;&#10;            &lt;artifactId&gt;ctp-workflow&lt;/artifactId&gt;&#13;&#10;            &lt;version&gt;${ctp.version}&lt;/version&gt;&#13;&#10;        &lt;/dependency&gt;&#13;&#10;    &lt;/dependencies&gt;&#13;&#10;&#13;&#10;&lt;/project&gt;" />
              <option name="serviceTemplate" value="package ${package};&#10;&#10;/**&#10;* @Author: ${author}&#10;* @Description: 描述&#10;* @Date: 创建于${time}&#10;**/&#10;public interface ${fileName}Manager {&#10;}&#10;" />
              <option name="springCfgTemplate" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;plugin&gt;&#10;    &lt;id&gt;${fileName.toLowerCaseFirstOne()}&lt;/id&gt;&#10;    &lt;name&gt;${pluginName}&lt;/name&gt;&#10;    &lt;category&gt;${pluginId}&lt;/category&gt;&#10;&lt;/plugin&gt;" />
              <option name="springControllerTemplate" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;!DOCTYPE beans PUBLIC &quot;-//SPRING//DTD BEAN//EN&quot; &quot;http://www.springframework.org/dtd/spring-beans.dtd&quot;&gt;&#10;&#10;&lt;beans default-autowire=&quot;byName&quot; default-lazy-init=&quot;false&quot; default-dependency-check=&quot;none&quot;&gt;&#10;    &lt;bean name=&quot;/${fileName.toLowerCaseFirstOne()}/${fileName.toLowerCaseFirstOne()}.do&quot; class=&quot;com.seeyon.apps.${fileName.toLowerCaseFirstOne()}.controller.${fileName}Controller&quot;/&gt;&#10;&lt;/beans&gt;&#10;" />
              <option name="springManagerTemplate" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;!DOCTYPE beans PUBLIC &quot;-//SPRING//DTD BEAN//EN&quot; &quot;http://www.springframework.org/dtd/spring-beans.dtd&quot;&gt;&#10;&#10;&lt;beans default-autowire=&quot;byName&quot; default-lazy-init=&quot;false&quot; default-dependency-check=&quot;none&quot;&gt;&#10;    &lt;bean id=&quot;${fileName.toLowerCaseFirstOne()}Manager&quot; class=&quot;com.seeyon.apps.${fileName.toLowerCaseFirstOne()}.manager.impl.${fileName}ManagerImpl&quot;/&gt;&#10;&lt;/beans&gt;&#10;" />
              <option name="springPluginTemplate" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;beans default-autowire=&quot;byName&quot;&#10;       xmlns=&quot;http://www.springframework.org/schema/beans&quot;&#10;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;&#10;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans&#10;       http://www.springframework.org/schema/beans/spring-beans.xsd&#10;       http://www.springframework.org/schema/context&#10;       http://www.springframework.org/schema/context/spring-context.xsd&quot;&#10;&gt;&#10;    &lt;context:component-scan base-package=&quot;com.seeyon.apps.${fileName.toLowerCaseFirstOne()}&quot; /&gt;&#10;&lt;/beans&gt;&#10;&#10;" />
              <option name="springPropertyTemplate" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;ctpConfig&gt;&#10;    &lt;${fileName.toLowerCaseFirstOne()}&gt;&#10;        &lt;${fileName.toLowerCaseFirstOne()}Node mark=&quot;{VE}&quot; desc=&quot;配置信息&quot;&gt;&lt;/${fileName.toLowerCaseFirstOne()}Node&gt;&#10;    &lt;/${fileName.toLowerCaseFirstOne()}&gt;&#10;&lt;/ctpConfig&gt;" />
              <option name="ssoTemplate" value="package ${package};&#10;&#10;import com.seeyon.ctp.portal.sso.SSOLoginHandshakeAbstract;&#10;&#10;&#10;public class SsoLoginHandshake  extends SSOLoginHandshakeAbstract {&#10;     &#10;     /**&#10;     *握手方法，通过传入ticket获取对应的协同登录名&#10;     *注意：【V6.1如果ticket不加密则无法正常登录】：示例中ticket未加密，正式开发中请一定对登录名加密，否则有安全隐患！&#10;     * @return 返回ticket对应的协同登录名&#10;     */&#10;     public String handshake(String ticket) {&#10;          String userLogninName = &quot;&quot;;&#10;          if(ticket==null||ticket.equals(&quot;&quot;)) {&#10;               return null;&#10;          }&#10;          userLogninName = ticket;&#10;          return userLogninName;&#10;     }&#10;     &#10;     /**&#10;     * 注销单点登录&#10;     * @return &#10;     */&#10;     public void logoutNotify(String ticket) {&#10;          &#10;     }&#10;}" />
            </TemplateConfig>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>